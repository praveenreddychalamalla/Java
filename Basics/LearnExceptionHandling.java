/**
 * @author Praveen Reddy Chalamalla
 * @create date 2021-06-12
 * @desc Exception Handling in Java
 */
/**
 * An abnormal condition that arises in code during runtime is often referred as an exception, handled using try catch blocks.
 * Base class of all exceptions is throwable.
 * Unchecked exceptions - Generated by JVM. Base class of unchecked exceptions is RunTimeExceptionClass
 * Checked exceptions - checked by compiler.
 * 
 * Note:
 * Creating or returning a new object of exception doesn't throw any exception.
 * We can rethrow an exception caught in catch block.
 * If a super class throws an unchecked exception, it can be overridden in the sub class with the same exception or any other unchecked exceptions
 * Even if we write a return statement in a try block, finally block will be executed before returning.
 * Multiple exceptions can be caught in the same catch block with 'or' operator. Supported since Java 7
 */
class temp{
    static void fun1(){
        fun2();
    }
    static void fun2(){
        fun3();
    }
    static ArithmeticException fun3(){
        return new ArithmeticException("Exception Generated");
    }
    static NumberFormatException fun4(){
        throw new NumberFormatException("Explicit exception thrown");
    }
}
class LearnExceptionHandling {
    static void surprise(){
        try{
            System.out.println("Surprise: I am in try block");
            System.out.println("Surprise: Returning....");
            return; //Even if you place a return statement in try block, finally block gets executed before return.
        }
        finally{
            System.out.println("Surprise: Executed Finally");
        }
    }
    public static void main(String args[]){
        int[] arr=new int[]{1,2,3,4,0};
        try{
            int res=arr[0]/arr[6];
            System.out.println(res);
        }
        //If the exception does not match any of the exception classes mentioned in catch, then no catch block is executed (JVM handles the exception)
        catch(ArrayIndexOutOfBoundsException e){ // Array index out of bounds exception is caught here.
            System.out.println("Acess array within bounds");
        }
        catch(ArithmeticException e){ //Arithmetic exceptions are caught.
            System.out.println("Arithmetic Error");
        }
        finally{
            System.out.println("I will execute definitely");
        }

        //If there is a finally block, then it will be executed definitely .
        surprise();

        //Creating an exception object does not actually throw an exception
        try{
            temp.fun1();
        }
        catch(ArithmeticException e){ //Exception is not caught
            System.out.println("Inside catch");
        }
        finally{
            System.out.println("Inside finally");
        }
        //throw keyword is used to throw an exception explicitly, Mainly used to throw custom exceptions. Checked and unchecked exceptions can be thrown  
        try{
            temp.fun4();
        }
        catch(NumberFormatException e){ //Exception is caught
            System.out.println("Exception Caught");
            System.out.println(e.getMessage());
        }
        finally{
            System.out.println("Inside finally");
        }

    }
}
